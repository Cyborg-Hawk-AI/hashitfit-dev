-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.app_configurations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  key text NOT NULL UNIQUE,
  value text,
  is_secret boolean DEFAULT false,
  description text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT app_configurations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.assessment_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  age integer NOT NULL,
  gender text NOT NULL,
  height numeric NOT NULL,
  weight numeric NOT NULL,
  fitness_goal text NOT NULL,
  workout_frequency integer NOT NULL,
  diet text NOT NULL,
  equipment text NOT NULL,
  sports_played ARRAY DEFAULT '{}'::text[],
  allergies ARRAY DEFAULT '{}'::text[],
  existing_conditions ARRAY DEFAULT '{}'::text[],
  fitness_level text,
  previous_experience text,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT assessment_data_pkey PRIMARY KEY (id),
  CONSTRAINT assessment_data_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  content text NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text])),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  referenced_workout_id uuid,
  referenced_nutrition_id uuid,
  referenced_metric_id uuid,
  referenced_assessment_id uuid,
  ai_response_id text,
  ai_prompt_tokens integer,
  ai_completion_tokens integer,
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_referenced_workout_id_fkey FOREIGN KEY (referenced_workout_id) REFERENCES public.workout_logs(id),
  CONSTRAINT chat_messages_referenced_nutrition_id_fkey FOREIGN KEY (referenced_nutrition_id) REFERENCES public.nutrition_logs(id),
  CONSTRAINT chat_messages_referenced_assessment_id_fkey FOREIGN KEY (referenced_assessment_id) REFERENCES public.fitness_assessments(id),
  CONSTRAINT chat_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT chat_messages_referenced_metric_id_fkey FOREIGN KEY (referenced_metric_id) REFERENCES public.progress_metrics(id)
);
CREATE TABLE public.exercise_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_log_id uuid NOT NULL,
  exercise_name text NOT NULL,
  sets_completed integer NOT NULL,
  reps_completed text NOT NULL,
  weight_used text,
  rest_time interval,
  notes text,
  order_index integer NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  superset_group_id uuid,
  rest_seconds integer DEFAULT 60,
  position_in_workout integer DEFAULT 0,
  CONSTRAINT exercise_logs_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_logs_workout_log_id_fkey FOREIGN KEY (workout_log_id) REFERENCES public.workout_logs(id)
);
CREATE TABLE public.fitness_assessments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  assessment_date timestamp with time zone DEFAULT timezone('utc'::text, now()),
  pullups integer,
  pushups integer,
  squats integer,
  bench_press_max numeric,
  squat_max numeric,
  deadlift_max numeric,
  mile_time interval,
  vo2_max numeric,
  flexibility_score integer,
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT fitness_assessments_pkey PRIMARY KEY (id),
  CONSTRAINT fitness_assessments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  nutrition_log_id uuid NOT NULL,
  meal_type text CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text])),
  meal_title text NOT NULL,
  calories integer NOT NULL,
  protein_g integer NOT NULL,
  carbs_g integer NOT NULL,
  fat_g integer NOT NULL,
  consumed_at timestamp with time zone NOT NULL,
  notes text,
  meal_image_url text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  food_items jsonb,
  meal_description text,
  CONSTRAINT meal_logs_pkey PRIMARY KEY (id),
  CONSTRAINT meal_logs_nutrition_log_id_fkey FOREIGN KEY (nutrition_log_id) REFERENCES public.nutrition_logs(id)
);
CREATE TABLE public.meal_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  nutrition_plan_id uuid NOT NULL,
  meal_type text CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text])),
  meal_title text NOT NULL,
  description text,
  calories integer NOT NULL,
  protein_g integer NOT NULL,
  carbs_g integer NOT NULL,
  fat_g integer NOT NULL,
  order_index integer NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT meal_plans_pkey PRIMARY KEY (id),
  CONSTRAINT meal_plans_nutrition_plan_id_fkey FOREIGN KEY (nutrition_plan_id) REFERENCES public.nutrition_plans(id)
);
CREATE TABLE public.nutrition_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  log_date date NOT NULL,
  total_calories integer,
  total_protein_g integer,
  total_carbs_g integer,
  total_fat_g integer,
  water_intake_ml integer,
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT nutrition_logs_pkey PRIMARY KEY (id),
  CONSTRAINT nutrition_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.nutrition_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  daily_calories integer NOT NULL,
  protein_g integer NOT NULL,
  carbs_g integer NOT NULL,
  fat_g integer NOT NULL,
  diet_type text CHECK (diet_type = ANY (ARRAY['standard'::text, 'vegetarian'::text, 'vegan'::text, 'keto'::text, 'paleo'::text, 'gluten_free'::text])),
  ai_generated boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT nutrition_plans_pkey PRIMARY KEY (id),
  CONSTRAINT nutrition_plans_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  name text,
  age integer CHECK (age > 0 AND age < 120),
  gender text CHECK (gender = ANY (ARRAY['male'::text, 'female'::text, 'other'::text, 'prefer_not_to_say'::text])),
  height numeric CHECK (height > 0::numeric),
  weight numeric CHECK (weight > 0::numeric),
  fitness_goal text CHECK (fitness_goal = ANY (ARRAY['weight_loss'::text, 'muscle_gain'::text, 'endurance'::text, 'general_fitness'::text, 'strength'::text, 'flexibility'::text, 'sports_performance'::text])),
  workout_frequency integer CHECK (workout_frequency >= 1 AND workout_frequency <= 7),
  diet text CHECK (diet = ANY (ARRAY['standard'::text, 'vegetarian'::text, 'vegan'::text, 'keto'::text, 'paleo'::text, 'gluten_free'::text, 'mediterranean'::text, 'low_carb'::text])),
  equipment text CHECK (equipment = ANY (ARRAY['none'::text, 'minimal'::text, 'full_gym'::text, 'home_gym'::text, 'bodyweight'::text])),
  target_weight numeric,
  sports_played ARRAY,
  profile_image_url text,
  allergies ARRAY,
  dietary_restrictions ARRAY,
  has_completed_assessment boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.progress_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  measurement_date timestamp with time zone DEFAULT timezone('utc'::text, now()),
  weight numeric CHECK (weight > 0::numeric),
  body_fat_percentage numeric,
  chest_measurement numeric,
  waist_measurement numeric,
  hip_measurement numeric,
  arm_measurement numeric,
  thigh_measurement numeric,
  calf_measurement numeric,
  shoulder_measurement numeric,
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT progress_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT progress_metrics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_recommendations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_tips text,
  nutrition_tips text,
  weekly_goals text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_recommendations_pkey PRIMARY KEY (id),
  CONSTRAINT user_recommendations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  theme text DEFAULT 'light'::text,
  notifications_enabled boolean DEFAULT true,
  email_notifications_enabled boolean DEFAULT true,
  units_system text DEFAULT 'metric'::text CHECK (units_system = ANY (ARRAY['metric'::text, 'imperial'::text])),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_settings_pkey PRIMARY KEY (id),
  CONSTRAINT user_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_plan_id uuid NOT NULL,
  name text NOT NULL,
  sets integer NOT NULL,
  reps text NOT NULL,
  weight text,
  rest_time interval,
  notes text,
  order_index integer NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT workout_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT workout_exercises_workout_plan_id_fkey FOREIGN KEY (workout_plan_id) REFERENCES public.workout_plans(id)
);
CREATE TABLE public.workout_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_plan_id uuid,
  start_time timestamp with time zone NOT NULL,
  end_time timestamp with time zone,
  duration interval,
  calories_burned integer,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT workout_logs_pkey PRIMARY KEY (id),
  CONSTRAINT workout_logs_workout_plan_id_fkey FOREIGN KEY (workout_plan_id) REFERENCES public.workout_plans(id),
  CONSTRAINT workout_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  description text,
  category text CHECK (category = ANY (ARRAY['strength'::text, 'cardio'::text, 'hiit'::text, 'recovery'::text, 'sport_specific'::text, 'custom'::text])),
  difficulty integer CHECK (difficulty >= 1 AND difficulty <= 5),
  estimated_duration interval,
  target_muscles ARRAY,
  ai_generated boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT workout_plans_pkey PRIMARY KEY (id),
  CONSTRAINT workout_plans_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workout_schedule (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_plan_id uuid NOT NULL,
  scheduled_date date NOT NULL,
  scheduled_time time without time zone,
  duration interval,
  is_completed boolean DEFAULT false,
  completion_date timestamp with time zone,
  workout_log_id uuid,
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT workout_schedule_pkey PRIMARY KEY (id),
  CONSTRAINT workout_schedule_workout_log_id_fkey FOREIGN KEY (workout_log_id) REFERENCES public.workout_logs(id),
  CONSTRAINT workout_schedule_workout_plan_id_fkey FOREIGN KEY (workout_plan_id) REFERENCES public.workout_plans(id),
  CONSTRAINT workout_schedule_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);